import { Info, VError } from 'verror';
/** Error instantiation configuration. */
export interface PityConfig {
    /** Error message. */
    readonly message: string;
    /** Additional structured information to attach to the error. */
    readonly info?: Info;
    /**
     * The HTTP status code of the error. If present, the error's message and
     * information will be public (surfaced back to the client). Note that the
     * cause is never sent to the client.
     */
    readonly publicCode?: number;
    /** Optional cause(s) of the error. */
    readonly cause?: Error | ReadonlyArray<Error> | null;
}
/** Simplified configuration for errors produced via a factory. */
export declare type PublicPityConfig = Omit<PityConfig, 'publicCode'>;
/**
 * Type of convenience error factory methods. A string will be transformed to a
 * message-only config. When the config is absent the message will be derived
 * from the status' reason phrase.
 */
export declare type PublicPityFactory = (cfg?: PublicPityConfig | string) => Error;
/** Client-facing error representation. */
export interface PublicPityData {
    readonly code: number;
    readonly message: string;
    readonly details?: any;
}
/**
 * The key used to store client information in VError's `info`. A symbol would
 * be ideal but `VError` doesn't currently support it.
 */
export declare const PUBLIC_DATA_KEY = "__Pity_clientData";
/** Pity constructor options. */
export interface PityOptions {
    /** Error name, useful for example with `Pity.hasCauseWithName`. */
    readonly name?: string;
    /** Constructor function, useful to trim stack traces. */
    readonly copt?: any;
}
/** Error class with optional client-side metadata. */
export declare class Pity extends VError {
    readonly message: string;
    readonly name: string;
    constructor(arg: PityConfig | string | number, opts?: PityOptions);
    /**
     * Returns the error's HTTP status code if present in the error itself or one
     * of its causes.
     */
    static publicCode(err: Error): number | undefined;
    /**
     * Extracts the data to send back to the client from an error. If the error is
     * not a public `Pity` error and does not have any such causes, a generic
     * internal server error message will be returned.
     */
    static publicData(err: Error): PublicPityData;
    /** Convenience client error factory generator. */
    private static publicFactory;
    static badSyntax: PublicPityFactory;
    static unauthorized: PublicPityFactory;
    static paymentRequired: PublicPityFactory;
    static forbidden: PublicPityFactory;
    static notFound: PublicPityFactory;
    static methodNotAllowed: PublicPityFactory;
    static notAcceptable: PublicPityFactory;
    static proxyAuthenticationRequired: PublicPityFactory;
    static requestTimeout: PublicPityFactory;
    static conflict: PublicPityFactory;
    static gone: PublicPityFactory;
    static lengthRequired: PublicPityFactory;
    static preconditionFailed: PublicPityFactory;
    static requestTooLong: PublicPityFactory;
    static requestUriTooLong: PublicPityFactory;
    static unsupportedMediaType: PublicPityFactory;
    static requestedRangeNotSatisfiable: PublicPityFactory;
    static expectationFailed: PublicPityFactory;
    static imATeapot: PublicPityFactory;
    static insufficientSpaceOnResource: PublicPityFactory;
    static methodFailure: PublicPityFactory;
    static unprocessableEntity: PublicPityFactory;
    static locked: PublicPityFactory;
    static failedDependency: PublicPityFactory;
    static preconditionRequired: PublicPityFactory;
    static tooManyRequests: PublicPityFactory;
    static requestHeaderFieldsTooLarge: PublicPityFactory;
    static unavailableForLegalReasons: PublicPityFactory;
    static internalServerError: PublicPityFactory;
    static notImplemented: PublicPityFactory;
    static badGateway: PublicPityFactory;
    static serviceUnavailable: PublicPityFactory;
    static gatewayTimeout: PublicPityFactory;
    static httpVersionNotSupported: PublicPityFactory;
    static insufficientStorage: PublicPityFactory;
    static networkAuthenticationRequired: PublicPityFactory;
}
